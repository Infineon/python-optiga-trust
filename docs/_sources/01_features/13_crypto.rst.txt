Cryptographic operations
========================

Here are some examples for what you can do with this submodule

True random number generation
-----------------------------

Generate a true random number, accepted values from 8 to 255 bytes

::

    from optigatrust import crypto

    crypto.random(8)

Key pair generation (ECC, RSA)
------------------------------

::

    from optigatrust import crypto
    from optigatrust import objects

    key_object = objects.ECCKey(0xe0f1)
    pkey, _ = crypto.generate_pair(key_object, curve='secp256r1')
    pkey, _ = crypto.generate_pair(key_object, curve='secp384r1')
    pkey, _ = crypto.generate_pair(key_object, curve='secp521r1')
    pkey, _ = crypto.generate_pair(key_object, curve='brainpoolp256r1')
    pkey, _ = crypto.generate_pair(key_object, curve='brainpoolp384r1')
    pkey, _ = crypto.generate_pair(key_object, curve='brainpoolp512r1')

    pkey, _ = crypto.generate_pair(key_object, curve='secp384r1', key_usage=['authentication', 'signature'])
    pkey, _ = crypto.generate_pair(key_object, curve='secp384r1', key_usage=['authentication', 'key_agreement', 'signature'])

    pkey, key = crypto.generate_pair(key_object=key_object, curve='secp256r1', export=True)

Elliptic Curve Digital Signature Algorithm (ECDSA)
--------------------------------------------------

::

    from optigatrust import crypto
    from optigatrust import objects

    key_object = objects.ECCKey(0xe0f1)
    _, _ = crypto.generate_pair(key_object, curve='secp256r1')
    s = crypto.ecdsa_sign(key_object, 'Hello World')


PKCS#1 v1.5 signature generation (RSA SSA)
------------------------------------------

::

    from optigatrust import crypto
    from optigatrust import objects

    key_object = objects.RSAKey(0xe0fc)
    _, _ = crypto.generate_pair(key_object, key_size=1024)
    s = crypto.pkcs1v15_sign(key_object, 'Hello World')

Elliptic Curve Diffie-Hellman (ECDH)
------------------------------------

Store the shared secret internally on the chip

::

    # methods to handle objects
    import optigatrust.objects as objects
    # methods to handle crypto functions on the optiga
    import optigatrust.crypto as optiga_ec

    # imports from the cryptography package to create a third party private, public key pairs
    from cryptography.hazmat.primitives.asymmetric import ec
    from cryptography.hazmat.backends import default_backend
    from cryptography.hazmat.primitives import serialization

    # Generate a new key pair
    # ignore the public part, as we need only the private key generated in the slot
    key_object = objects.ECCKey(0xe0f1)
    _, _ = optiga_ec.generate_pair(key_object, 'secp256r1')

    # Generate a new key pair in soft, export the peer part
    private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())
    peer_public_key = private_key.public_key().public_bytes(
        encoding=serialization.Encoding.DER,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )

    # Derive a shared secret using our internally store private key, and external public
    # Don't export the shared secret, but store internally
    session_object = optiga_ec.ecdh(key_object, peer_public_key)

Use a different curve - 'brainpool256r1'

::

    # methods to handle objects
    import optigatrust.objects as objects
    # methods to handle crypto functions on the optiga
    import optigatrust.crypto as optiga_ec

    # imports from the cryptography package to create a third party private, public key pairs
    from cryptography.hazmat.primitives.asymmetric import ec
    from cryptography.hazmat.backends import default_backend
    from cryptography.hazmat.primitives import serialization

    # Generate a new key pair
    # ignore the public part, as we need only the private key generated in the slot
    key_object = objects.ECCKey(0xe0f1)
    _, _ = optiga_ec.generate_pair(key_object, 'brainpoolp256r1')

    # Generate a new key pair in soft, export the peer part
    private_key = ec.generate_private_key(ec.BrainpoolP256R1(), default_backend())
    peer_public_key = private_key.public_key().public_bytes(
        encoding=serialization.Encoding.DER,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )

    # Derive a shared secret using our internally store private key, and external public
    # Don't export the shared secret, but store internally
    session_object = optiga_ec.ecdh(key_object, peer_public_key)


Hash-based Message Authentication Code (HMAC)
---------------------------------------------

Using an ECDH to generate the shared secret, and use this secret for HMAC

::

    # methods to handle crypto functions on the optiga
    import optigatrust.crypto as optiga_ec

    # ... repeat steps to generate a proper shared secret on the chip from the above example
    session_object = ecdh('with_secp256r1_curve')

    # Generate hash-based MAC
    data = 'Hello world!'
    mac = optiga_ec.hmac(session_object, str.encode(data), hash_algorithm='sha256')

or with a different curve

::

    # methods to handle crypto functions on the optiga
    import optigatrust.crypto as optiga_ec

    # ... repeat steps to generate a proper shared secret on the chip from the above example
    session_object = ecdh('with_brainpoolp512r1_curve')

    # Generate hash-based MAC
    data = 'Hello world!'
    mac = optiga_ec.hmac(session_object, str.encode(data), hash_algorithm='sha512')

Use an externally provided secret

::

    # methods to handle objects
    import optigatrust.objects as objects
    # methods to handle crypto functions on the optiga
    import optigatrust.crypto as optiga_ec

    secret = 'BFB770EEBF8F61C704E00D828B7A3641D5CD7A3846DEF90F214240250AAF9C2E'

    # Initialise the object and write secret data to it.
    app_data = objects.AppData(0xf1d0)
    app_data.write(bytes().fromhex(secret))

    # AppData Object should have a shared secret type to be used for hmac
    app_data.meta = {'type': 'pre_sh_secret', 'execute': 'always'}

    mac = optiga_ec.hmac(app_data, str.encode(data), hash_algorithm='sha256')

Key Derivation (HKDF, TLS PRF)
------------------------------

TLS PRF

::

    # methods to handle crypto functions on the optiga
    import optigatrust.crypto as optiga_ec

    # random seed for the kdf function
    seed = '61C7DEF90FD5CD7A8B7A364104E00D823846BFB770EEBF8F40252E0A2142AF9C'

    # ... repeat steps to generate a proper shared secret on the chip from the above example
    session_object = ecdh('with_secp256r1_curve')

    # derive a key and export it
    derived_key = optiga_ec.tls_prf(session_object, 32, seed=bytes().fromhex(seed), hash_algorithm='sha256', export=True)


Use an externally provided secret

::

    # methods to handle objects
    import optigatrust.objects as objects
    # methods to handle crypto functions on the optiga
    import optigatrust.crypto as optiga_ec

    secret = 'BFB770EEBF8F61C704E00D828B7A3641D5CD7A3846DEF90F214240250AAF9C2E'

    # Initialise the object and write secret data to it.
    app_data = objects.AppData(0xf1d0)
    app_data.write(bytes().fromhex(secret))

    # AppData Object should have a shared secret type to be used for an kdf
    app_data.meta = {'type': 'pre_sh_secret', 'execute': 'always'}

    derived_key = optiga_ec.tls_prf(app_data, 32, label='Firmware update', seed=bytes().fromhex(seed), hash_algorithm=hash_alg, export=True)


HKDF

::

    # methods to handle crypto functions on the optiga
    import optigatrust.crypto as optiga_ec

    # random seed for the kdf function
    seed = '61C7DEF90FD5CD7A8B7A364104E00D823846BFB770EEBF8F40252E0A2142AF9C'

    # ... repeat steps to generate a proper shared secret on the chip from the above example
    session_object = ecdh('with_secp512r1_curve')

    # derive a key and export it
    derived_key = optiga_ec.hkdf(session_object, 32, hash_algorithm='sha512', export=True)


Use an externally provided secret

::

    # methods to handle objects
    import optigatrust.objects as objects
    # methods to handle crypto functions on the optiga
    import optigatrust.crypto as optiga_ec

    secret = 'BFB770EEBF8F61C704E00D828B7A3641D5CD7A3846DEF90F214240250AAF9C2E'

    # Initialise the object and write secret data to it.
    app_data = objects.AppData(0xf1d0)
    app_data.write(bytes().fromhex(secret))

    # AppData Object should have a shared secret type to be used for an kdf
    app_data.meta = {'type': 'pre_sh_secret', 'execute': 'always'}

    derived_key = optiga_ec.hkdf(app_data, 32, hash_algorithm='sha256', export=True)


API
---


.. automodule:: optigatrust.crypto
   :members: random, generate_pair, ecdsa_sign_with_hash, ecdsa_sign, ecdsa_verify_data_oid, ecdsa_verify_data_pk_host, pkcs1v15_sign, ecdh, hmac, tls_prf, hkdf
